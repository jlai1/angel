
# svgContainer = d3.select('body').append('svg').attr('width', 1000).attr('height', 1000)

###multiple line charts


# Simple test data generator
###

# quote_msft = []

# sinAndCos = ->
#   sin = []
#   sin2 = []
#   cos = []
#   #Data is represented as an array of {x,y} pairs.
#   i = 0
#   while i < 100
#     sin.push
#       x: i
#       y: Math.sin(i / 10)
#     sin2.push
#       x: i
#       y: Math.sin(i / 10) * 0.25 + 0.5
#     cos.push
#       x: i
#       y: .5 * Math.cos(i / 10)
#     i++
#   #Line chart data should be sent as an array of series objects.
#   [
#     {
#       values: [sin]
#       key: 'Sine Wave'
#       color: '#ff7f0e'
#     }
#     {
#       values: cos
#       key: 'Cosine Wave'
#       color: '#2ca02c'
#     }
#     {
#       values: sin2
#       key: 'Another sine wave'
#       color: '#7777ff'
#       area: true
#     }
#   ]

# nv.addGraph ->
#   chart = nv.models.lineChart().useInteractiveGuideline(true).showLegend(true).showYAxis(true).showXAxis(true)
#   chart.xAxis.axisLabel('Time (ms)').tickFormat d3.format(',r')
#   chart.yAxis.axisLabel('Voltage (v)').tickFormat d3.format('.02f')

#   ### Done setting the chart up? Time to render it!###

#   myData = sinAndCos()
#   #You need data...
#   d3.select('svg').datum(myData).call chart
#   #Finally, render the chart!
#   #Update the chart when window resizes.
#   nv.utils.windowResize ->
#     chart.update()
#     return
#   chart

# ---
# generated by js2coffee 2.2.0

